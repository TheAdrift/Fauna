// Maths and Pseudocode

--// In lieu of a final decision on engine and implementation, I've 
created this document as a way to represent the relevant maths and
functions for our game loop in an abstract and implementation-agnostic 
form.

Hopefully this will ease the transition into whatever tool we 
eventually settle on. As an added benefit, this could help us keep the 
project well-documented, and perhaps also allow us to re-implement
or port the project to another codebase later on. 

Feel free to query, comment, change or otherwise alter the document.//--

--// NOTA BENE: These are not guaranteed to be organized in a manner
that would make sense at runtime. This is a notebook, where functions, 
logic, and structures can be sketched out and hacked apart collabora-
-tively. However, at the beginning of this document we should include 
a list of shorthand var. and function names, with brief descriptions, 
for convention, convenience, and to stave off massive head trauma. //--

//List O' vars
bools:
	inAir	// For jumping and falling mechanics. Should be True when 
			// player is in the air for any reason.

	**isJump	// Should be true only during a player-initiated jump.
			// In case we need to differentiate that state of affairs.**

	isCrouch	// True while the player is in a stealthy state.

	isDash	// True while player is running/dashing. **QUERY: should we
			// split that into separate run and dash states?**

ints and floats:
	dT		// "delta Time." A convenient way of representing game time 
			// since last tick. For framerate independent calculations.

	height	// For jumping and falling mechanics. Represents altitude of
			// player as vertical distance, in pixels, between player
			// avatar and floor collider.

	grav	// For jumping and falling mechanics. Represents gravity
			// in a given room.
	
	jumpSpeed	// For jumping and falling mechanics. Represents the
			// upward speed of the player.

	moveSpeed	// For moving the player around. Represents the speed,
			// in pixels per second, that the player moves unmodified.

	speed	// To simplify movement logic. Represents player speed, in
			// pixels per second, after modification.
    
    x_vel   // amount added to x position every tick.
            // Positive (+) values = moving right
            // Negative (-) values = moving left
    
    y_vel   // amount added to y position every tick.
            // Positive (+) values = moving down
            // Negative (-) values = moving up

//List O' functs

//Other objects
clockTick:
	one tick of game time.

rect:
	a polygon with four corners.
	Has properties:
		this.position 	// position coordinates {x, y} in pixels
                        // measured from top left corner.
			this.X		// position coordinate {x}
			this.Y		// position coordinate {y}
		this.size		// dimensions {Width, Height} in pixels.
			this.Width	// dimension {Width} in pixels.
			this.Height	// dimension {Height} in pixels.
        this.x_vel      // velocity, in pixels per second, along x-axis.
        this.y_vel      // velocity, in pixels per second, along y-axis.
    Has methods:
		move this {x, y}

	floorCollider:
		inherits from rect. Invisible. Represents the player's position  
		on the floor, as though it were the player's shadow.

	playerCollider:
		inherits from rect. Invisible. Represents the player's position,
		onto which the player's sprite is placed.

	solid:
		inherits from rect. Invisible. A tile which resists movement.
	
	floor:
		inherits from rect. Invisible. A tile which permits movement.
		
		air:
			inherits from walkThru. Permits movement, but triggers an
			"is inAir" or "isFalling" event.
	
    slope:
        inherits from rect. Invisible. A tile with an embedded slope segment.
    
	**other tile types here?**

sprite:
	an image displayed with aplha transparency. Inherits from rect.
	--//Has additional properties:
		this.image		// points to source image for the current
						// animation frame.
		this.anim		// identifies current animation.
		this.animFrame	// zero index of current animation frame.
		this.animPlaying// boolean; true if animation is playing.//--


// Movement

// NB: these aren't properly structured, named functions, just notes.
			--// for reference, {0,0} is at top right of window,
				x increases left to right,
				y increases top to bottom. //--
every clockTick:
    {   if: player.x_vel > speed:{
            player.x_vel = speed
            }
        else if: player.x_vel < -speed:{
            player.x_vel = -speed
            }
    }
    {   if: player.y_vel > speed:{
            player.y_vel = speed
            }
        else if: player.y_vel < -speed:{
            player.y_vel = -speed
            }
    }
    {
        floorCollider.X = floorCollider.X + player.x_vel
        floorCollider.Y = floorCollider.Y + player.x_vel
    }
    {
		playerCollider.X = floorCollider.X
		playerCollider.Y = floorCollider.Y - height - (playerCollider.Height/2) + (floorCollider.Height/2)
	}
	{
		height = height + (jumpSpeed * dT)
	}

while height <= 0:	// Inequality used to catch discrepancies in physics
					// steps if there are any.
	{
		height = 0
		jumpSpeed = 0
        inAir = false
	}

gravity:
	{
	while inAir === true:
		{
			jumpSpeed = jumpSpeed - (grav * dT)
		}
	}

jump:
	{
	on [keyJump]_down:
		{
			jumpSpeed = jumpStrength
			inAir = True
		}
	}
	
moving:		--// Most engines I've looked at have some way of handling 
movement in 8 compass directions with equal magnitude, but in case we 
have to write one from scratch, this should be the right math. Formula
for the diagonals are worked out from the Pythagorean theorem assuming
equal legs. //--

if isDash === true:
    {
        speed = moveSpeed * 2
    }
else if isCrouch === true:
    {
        speed = moveSpeed / 2
    }
else:
    {
        speed = moveSpeed
    }

switch: [button]_down
    case [moveLeft]:
        {
            player.x_vel = (-speed)*dT
        }
    case [moveRight]:
        {
            player.x_vel = speed*dT
        }
    case [moveUp]:
        {
            player.y_vel = (-speed)*dT
        }
    case [moveDown]:
        {
            player.y_vel = speed*dT
        }
    case [moveUp && moveLeft]:
        {
            player.x_vel = -(sqrt((speed^2)/2) * dT)
            player.y_vel = -(sqrt((speed^2)/2) * dT)
        }
    case [moveUp && moveRight]:
        {
            player.x_vel = (sqrt((speed^2)/2) * dT)
            player.y_vel = -(sqrt((speed^2)/2) * dT)
        }
    case [moveDown && moveRight]:
        {
            player.x_vel = (sqrt((speed^2)/2) * dT)
            player.y_vel = (sqrt((speed^2)/2) * dT)
        }
    case [moveDown && moveLeft]:
        {
            player.x_vel = -(sqrt((speed^2)/2) * dT)
            player.y_vel = (sqrt((speed^2)/2) * dT)
        }

Rough algorithm for slope detection:

1. Does player floor hitbox collide with a slope tile?
2. What kind of slope?

   D|  /+|B	a. Up-Left slope
    | /++|	m is +
   A|/+++|C	y >= m*x + b is permitted; y < m*x + b is a collision

   A|+\  |D	b. Up-Right slope
    |++\ |	m is -
   C|+++\|B	y <= m*x + b is permitted; y > m*x + b is a collision

   C|+++/|B	c. Down-Right slope
    |++/ |	m is +
   A|+/  |D	y <= m*x + b is permitted; y > m*x = b is a collision

   A|\+++|C	d. Down-Left slope
    | \++|	m is -
   D|  \+|B	y >= m*x + b is permitted; y < m*x + b is a collision

	Line equation:
		y = m*x + b
		x = (y-b)/m
		b = A.y - m* A.x
		b = A.y - ((A.y-B.y)/(A.x-B.x))*A.x

	Some facts about slope m:
		m = h/w = dh/dw
		h = A.y-B.y ; w = A.x-B.x
		dh = h/gcd(h, w)
		dw = w/gcd(h, w)
		c^2 = dh^2 + dw^2
		c = sqrt(dh^2 + dw^2)

	Scaling movement speed along slope:
		similarity: tri_ABC ||| tri_dh,dw,c ||| tri_dX,dY,Speed
		dX/dw = dY/dh = Speed/c
		dX = (Speed/c)*dW
		dY = (speed/c)*dH

3. Check if player.Y >|=|< m * player.X + b
Ideally, we would then:
	1. Find point of collision I(x, y):
		Finding point of collision should be a matter of solving a system of equations.
        Specifically, finding the intersection of two line segments:
        The slope segment, AB
        The line segment P'P between the Player's current position P(X, Y) and previous P'(X', Y')
        
        P'.x = player.x - player.x_vel
        P'.y = player.y - player.x_vel
        
        slope line:

        y = ((A.y-B.y)/(A.x-B.x))*x + (A.y - ((A.y-B.y)/(A.x-B.x))*A.x)
        y = m*x + b

        player line: (unless P.x = P'.x; then x = P.x)

        y = ((P'.y-P.y)/(P'.x-P.x))*x + (P.y - ((P'.y-P.y)/(P'.x-P.x))*P.x)
        y = m'*x + b'

        Intersection I(x, y)

        If P.x = P'x, then I.x = P.x (skip below)
        If m = m', then lines are parallel and there was no collision.

        m*x + b = m'*x + b'
        m*x - m'*x = b - b'
        (m - m')x = b - b'

        I.x = (b - b')/(m - m')
        I.y = m*I.x + b

	2. Find time "T" since collision
		player.x_vel is change in player.X per second
		player.y_vel is change in player.Y per second

		T = (P.x - I.x)/player.x_vel or (P.y - I.y)/player.y_vel

	3. Determine if player is moving "into" slope, and in what direction.

	4. Find the position player would have travelled to since collision along slope m in time "T"
	Move player to that position.

		set player.X = I.x +|- dX*T
		set player.Y = I.y +|- dY*T

This resolves issues wherein point moves too far between ticks to register collision exactly.
